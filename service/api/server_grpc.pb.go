// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/server.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlogServer_Like_FullMethodName          = "/service.BlogServer/Like"
	BlogServer_Unlike_FullMethodName        = "/service.BlogServer/Unlike"
	BlogServer_CreatePost_FullMethodName    = "/service.BlogServer/CreatePost"
	BlogServer_ReadPost_FullMethodName      = "/service.BlogServer/ReadPost"
	BlogServer_UpdatePost_FullMethodName    = "/service.BlogServer/UpdatePost"
	BlogServer_DeletePost_FullMethodName    = "/service.BlogServer/DeletePost"
	BlogServer_CreateComment_FullMethodName = "/service.BlogServer/CreateComment"
	BlogServer_ReadComment_FullMethodName   = "/service.BlogServer/ReadComment"
	BlogServer_UpdateComment_FullMethodName = "/service.BlogServer/UpdateComment"
	BlogServer_DeleteComment_FullMethodName = "/service.BlogServer/DeleteComment"
)

// BlogServerClient is the client API for BlogServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServerClient interface {
	Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error)
	Unlike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error)
	CreatePost(ctx context.Context, in *PostRequestCreate, opts ...grpc.CallOption) (*PostResponse, error)
	ReadPost(ctx context.Context, in *PostRequestReadDelete, opts ...grpc.CallOption) (*PostResponse, error)
	UpdatePost(ctx context.Context, in *PostRequestUpdate, opts ...grpc.CallOption) (*PostResponse, error)
	DeletePost(ctx context.Context, in *PostRequestReadDelete, opts ...grpc.CallOption) (*PostResponse, error)
	CreateComment(ctx context.Context, in *CommentRequestCreate, opts ...grpc.CallOption) (*CommentResponse, error)
	ReadComment(ctx context.Context, in *CommentRequestReadDelete, opts ...grpc.CallOption) (*CommentResponse, error)
	UpdateComment(ctx context.Context, in *CommentRequestUpdate, opts ...grpc.CallOption) (*CommentResponse, error)
	DeleteComment(ctx context.Context, in *CommentRequestReadDelete, opts ...grpc.CallOption) (*CommentResponse, error)
}

type blogServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServerClient(cc grpc.ClientConnInterface) BlogServerClient {
	return &blogServerClient{cc}
}

func (c *blogServerClient) Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeResponse)
	err := c.cc.Invoke(ctx, BlogServer_Like_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServerClient) Unlike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeResponse)
	err := c.cc.Invoke(ctx, BlogServer_Unlike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServerClient) CreatePost(ctx context.Context, in *PostRequestCreate, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, BlogServer_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServerClient) ReadPost(ctx context.Context, in *PostRequestReadDelete, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, BlogServer_ReadPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServerClient) UpdatePost(ctx context.Context, in *PostRequestUpdate, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, BlogServer_UpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServerClient) DeletePost(ctx context.Context, in *PostRequestReadDelete, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, BlogServer_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServerClient) CreateComment(ctx context.Context, in *CommentRequestCreate, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, BlogServer_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServerClient) ReadComment(ctx context.Context, in *CommentRequestReadDelete, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, BlogServer_ReadComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServerClient) UpdateComment(ctx context.Context, in *CommentRequestUpdate, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, BlogServer_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServerClient) DeleteComment(ctx context.Context, in *CommentRequestReadDelete, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, BlogServer_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServerServer is the server API for BlogServer service.
// All implementations must embed UnimplementedBlogServerServer
// for forward compatibility.
type BlogServerServer interface {
	Like(context.Context, *LikeRequest) (*LikeResponse, error)
	Unlike(context.Context, *LikeRequest) (*LikeResponse, error)
	CreatePost(context.Context, *PostRequestCreate) (*PostResponse, error)
	ReadPost(context.Context, *PostRequestReadDelete) (*PostResponse, error)
	UpdatePost(context.Context, *PostRequestUpdate) (*PostResponse, error)
	DeletePost(context.Context, *PostRequestReadDelete) (*PostResponse, error)
	CreateComment(context.Context, *CommentRequestCreate) (*CommentResponse, error)
	ReadComment(context.Context, *CommentRequestReadDelete) (*CommentResponse, error)
	UpdateComment(context.Context, *CommentRequestUpdate) (*CommentResponse, error)
	DeleteComment(context.Context, *CommentRequestReadDelete) (*CommentResponse, error)
	mustEmbedUnimplementedBlogServerServer()
}

// UnimplementedBlogServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogServerServer struct{}

func (UnimplementedBlogServerServer) Like(context.Context, *LikeRequest) (*LikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedBlogServerServer) Unlike(context.Context, *LikeRequest) (*LikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlike not implemented")
}
func (UnimplementedBlogServerServer) CreatePost(context.Context, *PostRequestCreate) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedBlogServerServer) ReadPost(context.Context, *PostRequestReadDelete) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPost not implemented")
}
func (UnimplementedBlogServerServer) UpdatePost(context.Context, *PostRequestUpdate) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedBlogServerServer) DeletePost(context.Context, *PostRequestReadDelete) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedBlogServerServer) CreateComment(context.Context, *CommentRequestCreate) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedBlogServerServer) ReadComment(context.Context, *CommentRequestReadDelete) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadComment not implemented")
}
func (UnimplementedBlogServerServer) UpdateComment(context.Context, *CommentRequestUpdate) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedBlogServerServer) DeleteComment(context.Context, *CommentRequestReadDelete) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedBlogServerServer) mustEmbedUnimplementedBlogServerServer() {}
func (UnimplementedBlogServerServer) testEmbeddedByValue()                    {}

// UnsafeBlogServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServerServer will
// result in compilation errors.
type UnsafeBlogServerServer interface {
	mustEmbedUnimplementedBlogServerServer()
}

func RegisterBlogServerServer(s grpc.ServiceRegistrar, srv BlogServerServer) {
	// If the following call pancis, it indicates UnimplementedBlogServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlogServer_ServiceDesc, srv)
}

func _BlogServer_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).Like(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServer_Unlike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).Unlike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_Unlike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).Unlike(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServer_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).CreatePost(ctx, req.(*PostRequestCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServer_ReadPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestReadDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).ReadPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_ReadPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).ReadPost(ctx, req.(*PostRequestReadDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServer_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).UpdatePost(ctx, req.(*PostRequestUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServer_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestReadDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).DeletePost(ctx, req.(*PostRequestReadDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServer_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequestCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).CreateComment(ctx, req.(*CommentRequestCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServer_ReadComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequestReadDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).ReadComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_ReadComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).ReadComment(ctx, req.(*CommentRequestReadDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServer_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequestUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).UpdateComment(ctx, req.(*CommentRequestUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServer_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequestReadDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServerServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServer_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServerServer).DeleteComment(ctx, req.(*CommentRequestReadDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogServer_ServiceDesc is the grpc.ServiceDesc for BlogServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.BlogServer",
	HandlerType: (*BlogServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Like",
			Handler:    _BlogServer_Like_Handler,
		},
		{
			MethodName: "Unlike",
			Handler:    _BlogServer_Unlike_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _BlogServer_CreatePost_Handler,
		},
		{
			MethodName: "ReadPost",
			Handler:    _BlogServer_ReadPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _BlogServer_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _BlogServer_DeletePost_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _BlogServer_CreateComment_Handler,
		},
		{
			MethodName: "ReadComment",
			Handler:    _BlogServer_ReadComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _BlogServer_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _BlogServer_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/server.proto",
}
